// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Role {
    USER
    AUTHOR
    ADMIN
}

model Article {
    id        String   @id @default(cuid())
    title     String
    slug      String
    content   String   @db.LongText
    createdAt DateTime @default(now())
    authorId  String
    posterUrl String
    author    User     @relation(fields: [authorId], references: [id])
    tags      Tag[]

    @@index([authorId])
}

model Tag {
    id       String    @id @default(cuid())
    name     String
    articles Article[]

    NewsSection   NewsSection? @relation(fields: [newsSectionId], references: [id])
    newsSectionId String?

    @@index([newsSectionId])
}

model Employee {
    id             String       @id @default(cuid())
    name           String
    email          String
    image          String?
    academicStatus String?
    disciplines    Discipline[]
}

model Discipline {
    id         String    @id @default(cuid())
    name       String
    descrption String
    credits    Float
    // Comma separated list of courses
    courses    String
    Employee   Employee? @relation(fields: [employeeId], references: [id])
    employeeId String?

    @@index([employeeId])
}

model NewsSection {
    id              String  @id @default(cuid())
    name            String
    description     String
    tags            Tag[]
    backgroundColor String?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    Article       Article[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
